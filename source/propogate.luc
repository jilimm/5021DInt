//****THIS PROPOGATER TAKES IN A RANDOME NUMBER SEQUENCE AND CLOCK SEQUENCE
//**OUTPUTS THE RANDOM NUMBER SEQUNCE AT THE RANDOMLY SELECTED CLOCK SEQUENCE
global RowNumb{
  const ROW1 = 4b0000;
  const ROW2= 4b0001;
  const ROW3= 4b0010;
  const ROW4 = 4b0011;
  const ROW5 = 4b0100;
  const ROW6 = 4b0101;
  const ROW7 = 4b0110;
  const ROW8 = 4b0111;
  const ROW9 = 4b1000;
  const ROW10 = 4b1001;
  const ROW11 = 4b1010;
}

global ClkNumb{
  const SLOWCLK251 = 3b000;
  const SLOWCLK22= 3b001;
  const SLOWCLK23= 3b010;
  const SLOWCLK24= 3b011;
  const SLOWCLK25 = 3b100;
  const SLOWCLK231 = 3b101;
  const SLOWCLK241 = 3b110;
  const SLOWCLK232 = 3b111;
}

module propogate (
    input clk,  // clock
    input rst,  // reset
    output rowLit[4], //the row to be lit up (ctr.value)
    output numSeq[3], //column to be lighted up
    output row1,
    output row2,
    output row3,
    output row4,
    output row5,
    output row6,
    output row7,
    output row8,
    output row9,
    output row10,
    output gnd1,
    output gnd2,
    output gnd3,
    output clkChoice[3]
  //  output propClkValue
  ) {

  sig chosenClk; 
  sig randNum[3];
  sig clkSel[3];
  
  .clk(clk){
  .rst(rst){
        //set up an array of slow clocks i can choose from
        counter slowclk22(#SIZE(1),#DIV(22));
        counter slowclk23(#SIZE(1),#DIV(23));
        counter slowclk24(#SIZE(1),#DIV(24));
        counter slowclk25(#SIZE(1),#DIV(25));
        randomizer randomizer; //this randomizer outputs 2 3 bit numbers (1. clk selection number, 2. number sequence)
    }
  } 

 .clk(chosenClk) {   //connect my normal clock to a slower clock
    .rst(rst){
        counter rowCtr(#SIZE(4),#TOP(4b1010)); //ctr will go from 00 to 11 this will be the number of row that is lit
      //seeds to start pn_gen of mojo seeds must be non-zero
        dff seed[32] (#INIT(32d51)); //seed to start numb_gen
        dff clkseed[32] (#INIT(32d3)); // seed to start clk_gen seed chosen is diff from seed1 to ensure randomness
  }
 }
 
   
  always {
    //initializin randomizer
    randomizer.numSeed = seed.q;
    randomizer.clkSeed = clkseed.q;
    randomizer.randnumNext = 0; 
    randomizer.randclkNext = 0; 
    randomizer.numbregEn = 0; 
    randomizer.clkregEn = 0;
    randomizer.randnumrst=rst;
    randomizer.randclkrst = rst;
    if (randomizer.ranNum==3b000){
            randNum = 3b101; //if the randomizer gives me 000 I will make the number sequence 101
    }
    else{
          randNum = randomizer.ranNum; //if not the number sequence is the number given by randomizer
    }
    
    clkSel = randomizer.ranClk;
    clkChoice = clkSel;
    rowLit = rowCtr.value;
    

    //instantiate my outputs
    row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
    gnd1 = ~randNum[0];  //when column is active connect corresponding gnd to 0
    gnd2 = ~randNum[1];
    gnd3 = ~randNum[2];
    
    numSeq = randNum;
    
      
   case (clkSel){
      ClkNumb.SLOWCLK251:
       chosenClk= slowclk25.value;
      ClkNumb.SLOWCLK22:
      chosenClk = slowclk22.value;
      ClkNumb.SLOWCLK23:
      chosenClk = slowclk23.value;
      ClkNumb.SLOWCLK24:
      chosenClk= slowclk24.value;
      ClkNumb.SLOWCLK25:
      chosenClk = slowclk25.value;
      ClkNumb.SLOWCLK231:
      chosenClk = slowclk23.value;
      ClkNumb.SLOWCLK232:
      chosenClk = slowclk23.value;
      ClkNumb.SLOWCLK241:
      chosenClk = slowclk24.value;
    }
    
    
    case (rowCtr.value){
    //when the corresponding row is 'active' make the entire row active
      RowNumb.ROW1:
          randomizer.randnumNext = 0; //dont generate a randome number sequence
          randomizer.randclkNext = 0; //dont generate a random clock selection
          randomizer.numbregEn = 0; //dont write enable any of my clock registers
          randomizer.clkregEn = 0;
          row1=1; 
          row2=0;
          row3=0;
          row4=0;
          row5=0;
          row6=0;
          row7=0;
          row8=0;
          row9=0;
          row10=0;
   
      RowNumb.ROW2:
      //light up row 2 with specified numbers
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=1;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
        
      RowNumb.ROW3:
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=0;
    row3=1;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
        
        
        RowNumb.ROW4:
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=0;
    row3=0;
    row4=1;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
        
         RowNumb.ROW5:
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=1;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
        
        RowNumb.ROW6:
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=1;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
        
        
        RowNumb.ROW7:
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=1;
    row8=0;
    row9=0;
    row10=0;
        
        RowNumb.ROW8:
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=1;
    row9=0;
    row10=0;
        
         
        RowNumb.ROW9:
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=1;
    row10=0;
        
        RowNumb.ROW10:
        randomizer.randnumNext = 0; 
          randomizer.randclkNext = 0; 
          randomizer.numbregEn = 0; 
          randomizer.clkregEn = 0;
        row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=1;
        
        RowNumb.ROW11:
        seed.d = seed.q + 1;
          clkseed.d = clkseed.q + 1;
          randomizer.randnumNext = 1; //generate random number seq
          randomizer.randclkNext = 1; //generate random clk number
          randomizer.numbregEn = 1; //write enable register to rmb new value
          randomizer.clkregEn = 1;
          randomizer.randnumrst = 1; //reset so you can generate new numb later
          randomizer.randclkrst = 1; 
        row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
    }
    
    
  }
}