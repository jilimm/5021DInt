/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module propogate_26 (
    input clk,
    input rst,
    output reg [3:0] rowLit,
    output reg [2:0] numSeq,
    output reg row1,
    output reg row2,
    output reg row3,
    output reg row4,
    output reg row5,
    output reg row6,
    output reg row7,
    output reg row8,
    output reg row9,
    output reg row10,
    output reg gnd1,
    output reg gnd2,
    output reg gnd3,
    output reg [2:0] clkChoice
  );
  
  
  
  reg chosenClk;
  
  reg [2:0] randNum;
  
  reg [2:0] clkSel;
  
  wire [1-1:0] M_slowclk22_value;
  counter_18 slowclk22 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk22_value)
  );
  wire [1-1:0] M_slowclk23_value;
  counter_38 slowclk23 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk23_value)
  );
  wire [1-1:0] M_slowclk24_value;
  counter_39 slowclk24 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk24_value)
  );
  wire [1-1:0] M_slowclk25_value;
  counter_40 slowclk25 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk25_value)
  );
  wire [3-1:0] M_randomizer_ranNum;
  wire [3-1:0] M_randomizer_ranClk;
  reg [32-1:0] M_randomizer_numSeed;
  reg [32-1:0] M_randomizer_clkSeed;
  reg [1-1:0] M_randomizer_randnumNext;
  reg [1-1:0] M_randomizer_randclkNext;
  reg [1-1:0] M_randomizer_randnumrst;
  reg [1-1:0] M_randomizer_randclkrst;
  reg [1-1:0] M_randomizer_numbregEn;
  reg [1-1:0] M_randomizer_clkregEn;
  randomizer_41 randomizer (
    .clk(clk),
    .rst(rst),
    .numSeed(M_randomizer_numSeed),
    .clkSeed(M_randomizer_clkSeed),
    .randnumNext(M_randomizer_randnumNext),
    .randclkNext(M_randomizer_randclkNext),
    .randnumrst(M_randomizer_randnumrst),
    .randclkrst(M_randomizer_randclkrst),
    .numbregEn(M_randomizer_numbregEn),
    .clkregEn(M_randomizer_clkregEn),
    .ranNum(M_randomizer_ranNum),
    .ranClk(M_randomizer_ranClk)
  );
  
  wire [4-1:0] M_rowCtr_value;
  counter_42 rowCtr (
    .clk(chosenClk),
    .rst(rst),
    .value(M_rowCtr_value)
  );
  reg [31:0] M_seed_d, M_seed_q = 32'h00000033;
  reg [31:0] M_clkseed_d, M_clkseed_q = 32'h00000003;
  
  always @* begin
    M_seed_d = M_seed_q;
    M_clkseed_d = M_clkseed_q;
    
    M_randomizer_numSeed = M_seed_q;
    M_randomizer_clkSeed = M_clkseed_q;
    M_randomizer_randnumNext = 1'h0;
    M_randomizer_randclkNext = 1'h0;
    M_randomizer_numbregEn = 1'h0;
    M_randomizer_clkregEn = 1'h0;
    M_randomizer_randnumrst = rst;
    M_randomizer_randclkrst = rst;
    if (M_randomizer_ranNum == 3'h0) begin
      randNum = 3'h5;
    end else begin
      randNum = M_randomizer_ranNum;
    end
    clkSel = M_randomizer_ranClk;
    clkChoice = clkSel;
    rowLit = M_rowCtr_value;
    row1 = 1'h0;
    row2 = 1'h0;
    row3 = 1'h0;
    row4 = 1'h0;
    row5 = 1'h0;
    row6 = 1'h0;
    row7 = 1'h0;
    row8 = 1'h0;
    row9 = 1'h0;
    row10 = 1'h0;
    gnd1 = ~randNum[0+0-:1];
    gnd2 = ~randNum[1+0-:1];
    gnd3 = ~randNum[2+0-:1];
    numSeq = randNum;
    
    case (clkSel)
      3'h0: begin
        chosenClk = M_slowclk25_value;
      end
      3'h1: begin
        chosenClk = M_slowclk22_value;
      end
      3'h2: begin
        chosenClk = M_slowclk23_value;
      end
      3'h3: begin
        chosenClk = M_slowclk24_value;
      end
      3'h4: begin
        chosenClk = M_slowclk25_value;
      end
      3'h5: begin
        chosenClk = M_slowclk23_value;
      end
      3'h7: begin
        chosenClk = M_slowclk23_value;
      end
      3'h6: begin
        chosenClk = M_slowclk24_value;
      end
    endcase
    
    case (M_rowCtr_value)
      4'h0: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h1;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h0;
      end
      4'h1: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h1;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h0;
      end
      4'h2: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h1;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h0;
      end
      4'h3: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h1;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h0;
      end
      4'h4: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h1;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h0;
      end
      4'h5: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h1;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h0;
      end
      4'h6: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h1;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h0;
      end
      4'h7: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h1;
        row9 = 1'h0;
        row10 = 1'h0;
      end
      4'h8: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h1;
        row10 = 1'h0;
      end
      4'h9: begin
        M_randomizer_randnumNext = 1'h0;
        M_randomizer_randclkNext = 1'h0;
        M_randomizer_numbregEn = 1'h0;
        M_randomizer_clkregEn = 1'h0;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h1;
      end
      4'ha: begin
        M_seed_d = M_seed_q + 1'h1;
        M_clkseed_d = M_clkseed_q + 1'h1;
        M_randomizer_randnumNext = 1'h1;
        M_randomizer_randclkNext = 1'h1;
        M_randomizer_numbregEn = 1'h1;
        M_randomizer_clkregEn = 1'h1;
        M_randomizer_randnumrst = 1'h1;
        M_randomizer_randclkrst = 1'h1;
        row1 = 1'h0;
        row2 = 1'h0;
        row3 = 1'h0;
        row4 = 1'h0;
        row5 = 1'h0;
        row6 = 1'h0;
        row7 = 1'h0;
        row8 = 1'h0;
        row9 = 1'h0;
        row10 = 1'h0;
      end
    endcase
  end
  
  always @(posedge chosenClk) begin
    if (rst == 1'b1) begin
      M_seed_q <= 32'h00000033;
      M_clkseed_q <= 32'h00000003;
    end else begin
      M_seed_q <= M_seed_d;
      M_clkseed_q <= M_clkseed_d;
    end
  end
  
endmodule
